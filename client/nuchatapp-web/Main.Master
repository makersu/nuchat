<%@ Master Language="C#" AutoEventWireup="true" CodeBehind="Main.master.cs" Inherits="ChatSample.Main" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" ng-app="intrachat">
<head runat="server">
    <title></title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link href="css/ChatStyle.css" rel="stylesheet" type="text/css" />
    <link href="css/jquery.ui.all.css" rel="stylesheet" type="text/css" />
    <!-- Chatbox styles. -->
    <link href="css/chatbox.min.css" rel="stylesheet" type="text/css" />

    <!--Script references. -->
  
      <!--Reference the jQuery library. -->
    <script src="Scripts/jquery-1.6.4.min.js" type="text/javascript"></script>
    <script src="Scripts/ui/jquery.ui.core.js" type="text/javascript"></script>
    <script src="Scripts/ui/jquery.ui.widget.js" type="text/javascript"></script>
    <script src="Scripts/ui/jquery.ui.mouse.js" type="text/javascript"></script>
    <script src="Scripts/ui/jquery.ui.draggable.js" type="text/javascript"></script>
    <script src="Scripts/ui/jquery.ui.resizable.js" type="text/javascript"></script>
    

    <!--Reference the SignalR library. -->
    <script src="Scripts/jquery.signalR-1.1.4.js" type="text/javascript"></script>
    
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="signalr/hubs"></script>

    <!-- Chatbox library. -->
    <script src="Scripts/chatbox.min.js"></script>

    <script type="text/javascript">

        angular.module('intrachat', ['ionic', 'chatbox.services', 'lbServices', 'btford.socket-io', 'jangular.ui'])
            .constant('ENV', {
              "BASE_URL": "http://140.123.4.17:3001/",//
              // "BASE_URL": "http://10.0.0.115:3001/",//
              "GRIDFS_BASE_URL": "http://140.123.4.17:3002/nuchat/"//
            })
            .run(function($ionicPlatform, User, FriendService, LBSocket, signaling) {
              $ionicPlatform.ready(function() {
                // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
                // for form inputs)
                /*if (window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
                  cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
                }*/
                if (window.StatusBar) {
                  // org.apache.cordova.statusbar required
                  StatusBar.styleLightContent();
                }

                /* Onload: Login */
                User.login({include: 'user', rememberMe: true}, {username: 'james', password: '1111'},
                  function () {

                    FriendService.getAllFriends();

                    console.log('self:join');//
                    LBSocket.emit('self:join', User.getCachedCurrent().id);

                    console.log('signaling.emit login');//
                    signaling.emit('signalingLogin', User.getCachedCurrent().id);
                  },
                  function (err) {
                    alert(err.statusText, err.data.error.message);
                  }
                );
              });
            })
            .controller('chatCtrl', function($scope, $filter, User, $chatbox, RoomService, FriendService, ENV, $checkFormat, $imageViewer) {
                console.log('chatCtrl');
                var messageOptions = {
                    imgSetting: {
                      clickHandler: function(id) {
                        var imgList = [];
                        angular.forEach($scope.room.viewMessages, function(msg) {
                          $checkFormat.isImg(msg.type) && imgList.push(msg);
                        });
                        var selectedList = $filter('filter')(imgList, { id: id });
                        if (!selectedList.length) {
                          selectedList = $filter('filter')(imgList, { timestamp: id });
                        }
                        var index = selectedList.length ? imgList.indexOf(selectedList[0]) : 0;
                        imgList = $filter('orderBy')(imgList, 'created');
                        $imageViewer.show(imgList, index, { imgSrcProp: 'originalFileId', base: ENV.GRIDFS_BASE_URL });
                      }
                    },
                    // audioSetting: { 
                    //   stop: { img: 'images/audiowave.png', icon: 'icon ion-play' }, 
                    //   play: { img: 'images/audiowave.gif', icon: 'icon ion-pause' }
                    // },
                    remote: ENV.GRIDFS_BASE_URL,
                  };

                  function enterRoom(toChat, room) {
                    $scope.chatboxes[toChat.username].show();
                    RoomService.getRoomMessages(room.id);
                  }
                  
                  $scope.chatboxes = {};
                  /*$scope.chats = Chats.all();
                  $scope.remove = function(chat) {
                    Chats.remove(chat);
                  };*/
                  $scope.chatTo = function(accountId) {
                    var privateroom = {
                      user: User.getCachedCurrent().id,
                      friend: accountId
                    };

                    var toChat = FriendService.getFriend(accountId)

                    RoomService.createPrivateRoom(privateroom).then(function(room){
                      console.log('RoomService.createPrivateRoom.then');
                      console.log(room);

                      if (room.id) {
                        if (!$scope.chatboxes[chatId]) {
                          $chatbox.fromTemplateUrl('templates/chat-detail.html', {
                            scope: $scope,
                            container: 'divContainer',
                            currentUser: User.getCachedCurrent(),
                            roomName: toChat.username,
                            roomObj: RoomService.getRoom(room.id),
                            msgOptions: messageOptions,
                          }).then(function(box) {
                            $scope.chatboxes[toChat.username] = box;
                            RoomService.setChattingRoom(room.id);
                            enterRoom(toChat, room);
                          });
                        } else {
                          if (!$scope.chatboxes[toChat.username].isShown())
                            enterRoom(toChat, room);
                        }
                       
                      }
                    });

                    console.log(User.getCachedCurrent());
                  };
            });

        /*$(function () {

            //setScreen(false);

            // Declare a proxy to reference the hub. 
            var chatHub = $.connection.chatHub;

            registerClientMethods(chatHub);

            // Start Hub
            $.connection.hub.start().done(function () {
                var name = $('#hLoginAccount').val();
                chatHub.server.connect(name);
                registerEvents(chatHub)

            });

        });*/

        /*
        function setScreen(isLogin) {

            if (!isLogin) {

                $("#divChat").hide();
                $("#divLogin").show();
            }
            else {

                $("#divChat").show();
                $("#divLogin").hide();
            }

        }
        */

        function registerEvents(chatHub) {
       
            $('#btnSendMsg').click(function () {

                var msg = $("#txtMessage").val();
                if (msg.length > 0) {

                    var userName = $('#hLoginAccount').val();
                    chatHub.server.sendMessageToAll(userName, msg);
                    $("#txtMessage").val('');
                }
            });

            $('#btnSendAllMsg').click(function () {
                var msg = $("#txtAllMsg").val();
                if (msg.length > 0) {

                    var userName = $('#hLoginAccount').val();
                    chatHub.server.sendMessageToAll(userName, msg);
                    $("#txtAllMsg").val('');
                }

            });

           
            $("#txtMessage").keypress(function (e) {
                if (e.which == 13) {
                    $('#btnSendMsg').click();
                }
            });


        }

        function registerClientMethods(chatHub) {

            // Calls when user successfully logged in
            chatHub.client.onConnected = function (id, userName, allUsers, messages) {

                //setScreen(true);

                $('#hdId').val(id);
                $('#hLoginAccount').val(userName);
                $('#spanUser').html(userName);

                // Add All Users
                for (i = 0; i < allUsers.length; i++) {

                    AddUser(chatHub, allUsers[i].ConnectionId, allUsers[i].UserName);
                }

                // Add Existing Messages
                for (i = 0; i < messages.length; i++) {

                    AddMessage(messages[i].UserName, messages[i].Message);
                }


            }

            // On New User Connected
            chatHub.client.onNewUserConnected = function (id, name) {
                var disc = $('<div style="font-size:11px; color:black" class="disconnect">"' + name + '" logged on.</div>');

                $(disc).hide();
                //$('#alertMessage').prepend(disc);
                //$(disc).fadeIn(200).delay(2000).fadeOut(200);

                AddUser(chatHub, id, name);
            }


            // On User Disconnected
            chatHub.client.onUserDisconnected = function (id, userName) {

                // remove the public chatbox
                $('#' + id).remove();

                // remove private chatbox
                //var ctrId = 'private_' + id;
                //$('#' + ctrId).remove();


                var disc = $('<div style="font-size:11px; color:black" class="disconnect">"' + userName + '" logged off.</div>');

                $(disc).hide();
                //$('#alertMessage').prepend(disc);
                //$(disc).fadeIn(200).delay(2000).fadeOut(200);

                if (userName != null && userName != "") {
                    var findName = 'uStatus' + userName;
                    var object = $("div[id*=" + findName + "]").first();

                    //object.html('<div style="padding:4px; background-color:#dedede;font-size:11px;">' + userName + '</div>');
                    object.html('<div style=" padding:1px; background-color:#dedede; width:10px;height:10px;">&nbsp;</div>');
                }

            }

            chatHub.client.messageReceived = function (userName, message) {

                AddMessage(userName, message);
            }

            chatHub.client.announcedMessageReceived = function (userName, message) {

                var disc = $('<div class="disconnect" style="font-size:11px; color:black"><b>' + userName + ':</b><br /><span style="">' + message + '</span></div>');

                $(disc).hide();
                $('#alertMessage').prepend(disc);
                $(disc).fadeIn(200).delay(5000).fadeOut(200);
            }


            chatHub.client.sendPrivateMessage = function (windowId, fromUserName, message) {

                var ctrId = 'private_' + windowId;


                if ($('#' + ctrId).length == 0) {

                    createPrivateChatWindow(chatHub, windowId, ctrId, fromUserName);

                }

                var loginName = $('#hLoginAccount').val()
                if (fromUserName != loginName) {
                    $('#' + ctrId).find('#divMessage').append('<div class="bubble"><span style="font-size:11px" class="userName"><b>' + fromUserName + '</b></span>:<br /> ' + message + '</div>');
                } else {
                    $('#' + ctrId).find('#divMessage').append('<div class="bubble bubble--alt">' + message + '</div><br />');
                }

               

                // set scrollbar
                var height = $('#' + ctrId).find('#divMessage')[0].scrollHeight;
                $('#' + ctrId).find('#divMessage').scrollTop(height);

            }

        }

        function AddUser(chatHub, id, name) {

            var userId = $('#hdId').val();

            var code = "";

            if (userId == id) {

                //code = $('<div style="padding:4px; background-color:#ff9980;font-size:11px;">' + name + "</div>");
                code = $('<div style=" padding:1px; background-color:blue; width:10px;height:10px;">&nbsp;</div>');
            }
            else {

                //code = $('<a style="padding:4px; background-color:#00cc66;;font-size:11px;" id="' + id + '" class="user" >' + name + '<a>');
                code = $('<div style=" padding:1px; background-color:#00cc66; width:10px;height:10px;" id="' + id + '" >&nbsp;</div>');

                $(code).click(function () {

                    var id = $(this).attr('id');
                    
                    if (userId != id)
                        OpenPrivateChatWindow(chatHub, id, name);

                });
            }

            //$("#divusers").append(code);
            //$("#ContentPlaceHolder1_peopleList1_gvPeople_uStatusUserB_0").append(code);
            // var object = $("#divGrid").find("a[id$='uStatus']");
            if (name != "") {
                var findName = 'uStatus' + name;
                var object = $("div[id*=" + findName + "]").first();
                if (object != null) {
                    object.html(code);
                }
            }        
            //nsole.log(object);
        }
        function startPrivateChat() {
            OpenPrivateChatWindow(chatHub, id, name);
        }

        function AddMessage(userName, message) {
            $('#divChatWindow').append('<div class="message"><span class="userName">' + userName + '</span>: ' + message + '</div>');

            var height = $('#divChatWindow')[0].scrollHeight;
            $('#divChatWindow').scrollTop(height);
        }

        function OpenPrivateChatWindow(chatHub, id, userName) {

            var ctrId = 'private_' + id;

            if ($('#' + ctrId).length > 0) return;

            createPrivateChatWindow(chatHub, id, ctrId, userName);

        }

        function createPrivateChatWindow(chatHub, userId, ctrId, userName) {

            var div = '<div id="' + ctrId + '" class="ui-widget-content draggable" style="display:inline; position:relative; padding:0px; border: 1px solid black" rel="0">' +
                       '<div class="header">' +
                          '<div  style="float:right;">' +
                              '<img id="imgDelete"  style="cursor:pointer;" src="images/delete.png"/>' +
                           '</div>' +

                           '<span style="font-size:11px" class="selText" rel="0">' + userName + '</span>' +
                       '</div>' +
                       '<div id="divMessage" class="messageArea">' +

                       '</div>' +
                       '<div class="buttonBar">' +
                          '<input id="txtPrivateMessage" class="msgText" type="text"   />' +
                          '<input id="btnSendMessage" class="submitButton button" type="button" value="Send"   />' +
                       '</div>' +
                    '</div>';

            //$('#chatRooms > div:last').append(div);
            var $div = $(div);
            

            // DELETE BUTTON IMAGE
            $div.find('#imgDelete').click(function () {
                $('#' + ctrId).remove();
            });

            // Send Button event
            $div.find("#btnSendMessage").click(function () {

                $textBox = $div.find("#txtPrivateMessage");
                var msg = $textBox.val();
                if (msg.length > 0) {

                    chatHub.server.sendPrivateMessage(userId, msg);
                    $textBox.val('');
                }
            });

            // Text Box event
            $div.find("#txtPrivateMessage").keypress(function (e) {
                if (e.which == 13) {
                    $div.find("#btnSendMessage").click();
                }
            });

            AddDivToContainer($div);

        }

        function AddDivToContainer($div) {
            $('#divContainer > div:last').append($div);

            $div.draggable({

                handle: ".header",
                stop: function () {

                }
            });


        }
        


    </script>
   
    <asp:ContentPlaceHolder ID="head" runat="server">
    </asp:ContentPlaceHolder>
</head>
<body>
    <form id="form1" runat="server">
    <div ng-controller="chatCtrl" id="divChatCtrl">
        <div style=" margin-left:40px;">Welcome <asp:Label Font-Bold="true" ID="lblLogin" runat="server"></asp:Label></div>
        <div id="alertMessage" style=" font-size:10px; margin-bottom:5px; margin-left:280px; color:white">Alert</div>
        <div style=" margin-left:40px;"><input id="txtAllMsg" type="text" /><button id="btnSendAllMsg">Announce</button></div>
        <asp:ContentPlaceHolder ID="ContentPlaceHolder1" runat="server">
        
        </asp:ContentPlaceHolder>
        
    </div>
    </form>

    
    <div id="divContainer" >
     <div style="bottom:10px; right:10px; position:absolute; display:inline-block; border:0px none white; padding:0px;"></div>
      <input id="hdId" type="hidden" />
     
        hhhh
    </div>

    <script>
        function buildDynamicSession(loginAs, chatWithLogin) {
            alert(loginAs + ' -> ' + chatWithLogin);
            
        }
    </script>
</body>
</html>
